package io.liveoak.ups.resource;

import io.liveoak.spi.RequestContext;
import io.liveoak.spi.SecurityContext;
import io.liveoak.spi.container.SubscriptionManager;
import io.liveoak.spi.resource.async.PropertySink;
import io.liveoak.spi.resource.async.Resource;
import io.liveoak.spi.resource.async.ResourceSink;
import io.liveoak.spi.resource.async.Responder;
import io.liveoak.spi.state.ResourceState;
import io.liveoak.ups.UPS;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * @author <a href="mailto:mwringe@redhat.com">Matt Wringe</a>
 */
public class AliasesResource implements Resource {

    UPSRootResource parent;

    public static final String ID = "aliases";

    private UPS upsService;
    private SubscriptionManager subscriptionManager;

    // <alias-id, aliasResource>
    Map<String, AliasResource> aliases;

    public AliasesResource(UPSRootResource parent, UPS upsService, SubscriptionManager subscriptionManager) {
        this.parent = parent;
        this.upsService = upsService;
        this.subscriptionManager = subscriptionManager;
        this.aliases = new HashMap<>();
    }

    @Override
    public Resource parent() {
        return parent;
    }

    @Override
    public String id() {
        return this.ID;
    }

    @Override
    public void readProperties( RequestContext ctx, PropertySink sink ) throws Exception {
        sink.close();
    }

    @Override
    public void updateProperties( RequestContext ctx, ResourceState state, Responder responder ) throws Exception {
        responder.updateNotSupported(this);
    }

    @Override
    public void createMember( RequestContext ctx, ResourceState state, Responder responder ) throws Exception {
        SecurityContext sCtx = ctx.securityContext();
        String subjectId = null;

        if ( sCtx != null && sCtx.isAuthenticated() ) {
            subjectId = sCtx.getSubject();
            for ( AliasResource aliasResource : aliases.values() ) {
                if ( aliasResource.userid != null && aliasResource.userid.equals( subjectId ) ) {
                    responder.resourceCreated( aliasResource );
                    return;
                }
            }
        }

        if (state.id() != null) {
            responder.invalidRequest("An alias resource cannot set its own id. IDs are generated by the system.");
            return;
        }

        // if we didn't find the userid in the list or the user is not authenticated, create a new alias
        String rUUID = UUID.randomUUID().toString();
        AliasResource resource = new AliasResource( this, upsService, rUUID, subjectId );
        aliases.put( rUUID, resource );
        responder.resourceCreated( resource );
        return;
    }

    @Override
    public void readMembers( RequestContext ctx, ResourceSink sink ) throws Exception {
        for (AliasResource aliasResource: aliases.values()) {
            sink.accept(aliasResource);
        }
        sink.close();

    }

    @Override
    public void readMember( RequestContext ctx, String id, Responder responder ) throws Exception {
        AliasResource alias = aliases.get( id );
        if (alias != null) {
            responder.resourceRead(alias);
        } else {
            responder.noSuchResource( id );
        }
    }

    @Override
    public void delete( RequestContext ctx, Responder responder ) throws Exception {
        responder.deleteNotSupported( this );
    }

    void removeAlias( String alias, RequestContext ctx, Responder responder ) {
        if (aliases.containsKey(alias)) {
            aliases.remove( alias );
        } else {
            responder.noSuchResource( alias );
        }
    }


    SubscriptionManager getSubscriptionManager() {
        return subscriptionManager;
    }
}
